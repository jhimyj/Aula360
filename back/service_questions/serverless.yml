service: service-question
org: ${env:ORG}

provider:
  name: aws
  runtime: python3.9
  memorySize: 1024
  timeout: 29
  role: ${env:ROLE}
  environment: #aca las variables de entorno
    QUESTION_TABLE: ${env:QUESTION_TABLE}
    QUESTION_GSI_INDEX_ROOMID_ID: ${env:QUESTION_GSI_INDEX_ROOMID_ID}
    QUESTION_GSI_INDEX_ROOMID_CREATEDAT: ${env:QUESTION_GSI_INDEX_ROOMID_CREATEDAT}
    HTTPS_SERVICE_ROOM: ${env:HTTPS_SERVICE_ROOM}
    JWT_SECRET_KEY: ${env:JWT_SECRET_KEY}


package:
  individually: true
  exclude:
    - .serverless/**
    - .venv/**
    - .idea/**
    - financial-data/**
    - build_layer.sh
    - user/**
    - test/**
    - Dockerfile
    - variables/**
    - businesses_businessId_ai-parse/**
    - "*.zip" #eres incluir otros ZIP que no sean necesarios
    - README.md  # Ejemplo, si hay archivos de documentación que no necesitas
    - serverless.yml
    - requirements.txt

# Definición del layer que contiene las dependencias comunes.
layers: #si es que hay librerias externa
  commonLib:
    package:
      artifact: layer_common_lib.zip
    description: "Dependencias comunes para todas las Lambdas"

functions:
  create:
    handler: create/handler.lambda_handler
    layers:
      - { Ref: CommonLibLambdaLayer }
    events:
      - http:
          path: questions/create
          method: post
          cors:
            origin: '*'
            methods:
              - POST
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent

  create_list:
    handler: create_list/handler.lambda_handler
    layers:
      - { Ref: CommonLibLambdaLayer }
    events:
      - http:
          path: questions/create/list
          method: post
          cors:
            origin: '*'
            methods:
              - POST
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent

  get:
    handler: get/handler.lambda_handler
    layers:
      - { Ref: CommonLibLambdaLayer }
    events:
      - http:
          path: questions/{question_id}/room/{room_id}
          method: get
          cors:
            origin: '*'
            methods:
              - GET
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent

  get_all:
    handler: get_all/handler.lambda_handler
    layers:
      - { Ref: CommonLibLambdaLayer }
    events:
      - http:
          path: questions/all/room/{room_id}
          method: get
          cors:
            origin: '*'
            methods:
              - GET
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent